const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

// –¢–æ–∫–µ–Ω API –¥–ª—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
// URL API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –æ –∑–∞–¥–∞—á–∞—Ö
const apiUrl = process.env.API_URL;
// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const webAppUrl = process.env.WEBAPP_URL;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const bot = new TelegramBot(token, { 
  polling: true,
  filepath: false,
  webhookReply: false
});

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
let isShuttingDown = false;

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// –•—Ä–∞–Ω–∏–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const userChatIds = new Map();

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const forwardedMessages = {};

// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
function gracefulShutdown() {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
  isShuttingDown = true;
  
  bot.stopPolling()
    .then(() => {
      console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
      process.exit(1);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getOrCreateUser(msg) {
  try {
    const telegramUser = msg.from;
    
    console.log(`üëâ DEBUG: getOrCreateUser –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: ${telegramUser.id}, –∏–º—è: ${telegramUser.first_name}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    const response = await axios.get(`${apiUrl}/users/telegram/${telegramUser.id}`);
    
    if (response.status === 200 && !response.data.error) {
      console.log(`üëâ ‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramUser.first_name} (ID: ${response.data.id})`);
      console.log(`üëâ DEBUG: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã:`, JSON.stringify(response.data));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ Telegram ID
      if (response.data.id !== telegramUser.id) {
        console.log(`üëâ ‚ö†Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${response.data.id}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ Telegram ID (${telegramUser.id})`);
        
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram ID –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ID
          const updateResponse = await axios.put(`${apiUrl}/users/${response.data.id}`, {
            id: telegramUser.id,
            telegram_id: telegramUser.id
          });
          
          if (updateResponse.status === 200) {
            console.log(`üëâ ‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${telegramUser.id}`);
            console.log(`üëâ DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, JSON.stringify(updateResponse.data));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            userChatIds.set(telegramUser.id, msg.chat.id);
            
            return updateResponse.data;
          }
        } catch (updateError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError);
          console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', updateError.response ? updateError.response.data : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ response');
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      userChatIds.set(response.data.id, msg.chat.id);
      
      return response.data;
    }
  } catch (error) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    console.log(`üëâ ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...`);
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response ? error.response.data : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ response');
  }
  
  try {
    const telegramUser = msg.from;
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      id: telegramUser.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π ID
      telegram_id: telegramUser.id,
      first_name: telegramUser.first_name,
      last_name: telegramUser.last_name,
      username: telegramUser.username
    };
    
    console.log(`üëâ DEBUG: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:`, JSON.stringify(userData));
    
    const createResponse = await axios.post(`${apiUrl}/users`, userData);
    
    if (createResponse.status === 200 || createResponse.status === 201) {
      console.log(`üëâ ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramUser.first_name} (ID: ${createResponse.data.id})`);
      console.log(`üëâ DEBUG: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, JSON.stringify(createResponse.data));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      userChatIds.set(createResponse.data.id, msg.chat.id);
      
      return createResponse.data;
    }
    
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  } catch (createError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', createError.response ? createError.response.data : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ response');
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramUser = msg.from;
    const defaultUser = {
      id: telegramUser.id,
      telegram_id: telegramUser.id,
      first_name: telegramUser.first_name,
      last_name: telegramUser.last_name,
      username: telegramUser.username
    };
    
    console.log(`üëâ DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, JSON.stringify(defaultUser));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    userChatIds.set(defaultUser.id, msg.chat.id);
    
    return defaultUser;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getOrCreateUser(msg);
    const userName = user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ TaskDrop. 

üî∏ *–ö–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å–æ –∑–Ω–∞–∫–∞ / (–Ω–∞–ø—Ä–∏–º–µ—Ä, /tasks)
2. –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ
3. –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

üî∏ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
/add –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
/webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, `üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ TaskDrop*

üî∏ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
/add –Ω–∞–∑–≤–∞–Ω–∏–µ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–ø—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ)
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üî∏ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏
2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ

üî∏ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:*
- –í –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: –ø–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
- –í –±–æ—Ç–µ: –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á

üî∏ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
- –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á–∞—Ö
- –í –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot.onText(/\/webapp/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TaskDrop:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å TaskDrop', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks - –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ API
bot.onText(/\/tasks/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramUserId = msg.from.id;
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    userChatIds.set(telegramUserId, chatId);
    
    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
    bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...');
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await axios.get(`${apiUrl}/tasks?user_id=${telegramUserId}`);
    const tasks = response.data;
    
    if (tasks.length === 0) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
          ]
        }
      });
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    let message = '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n';
    
    tasks.filter(task => !task.done).forEach((task, index) => {
      const dueDate = task.due_date ? `üìÖ ${task.due_date}` : '';
      const dueTime = task.due_time ? `‚è∞ ${task.due_time}` : '';
      const notification = task.notification ? `üîî ${task.notification}` : '';
      
      message += `${index + 1}. ${task.title}\n`;
      
      if (task.description) {
        message += `   ${task.description}\n`;
      }
      
      if (dueDate || dueTime || notification) {
        message += `   ${dueDate} ${dueTime} ${notification}\n`;
      }
      
      message += '\n';
    });
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: webAppUrl } }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.onText(/\/add (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const taskTitle = match[1]; // —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /add
  
  if (!taskTitle) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getOrCreateUser(msg);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await axios.post(`${apiUrl}/tasks`, {
      title: taskTitle,
      user_id: user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      done: false
    });
    
    if (response.data && response.data.id) {
      bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "${taskTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
          ]
        }
      });
    } else {
      throw new Error('–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/^\/add$/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
  
üìù */add –¢–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏*

*–ù–∞–ø—Ä–∏–º–µ—Ä:*
/add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ
/add –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ 18:00
/add –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É

–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏.`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.setMyCommands([
  { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: '/tasks', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á' },
  { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É' },
  { command: '/help', description: '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
  { command: '/webapp', description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TaskDrop' }
]);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
  if (msg.forward_from || msg.forward_from_chat) {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    const forwardFrom = msg.forward_from ? msg.forward_from.first_name : (msg.forward_from_chat ? msg.forward_from_chat.title : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ chatId
    forwardedMessages[chatId] = msg;
    console.log(`üëâ DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chatId: ${chatId}`);
    
    bot.sendMessage(chatId, `–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç: ${forwardFrom}\n${msg.text || '–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç'}\n\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è?`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'create_task_from_forward' }],
          [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_forward' }]
        ]
      }
    });
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (msg.text && !msg.text.startsWith('/')) {
    bot.sendMessage(chatId, `–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:

1Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥—ã* –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ –∑–Ω–∞–∫–∞ / (–Ω–∞–ø—Ä–∏–º–µ—Ä, /help)
2Ô∏è‚É£ *–ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ* —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–∫–Ω–æ–ø–∫–∏* –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  if (data === 'show_tasks') {
    // –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /tasks
    bot.emit('text', { 
      chat: { id: chatId },
      text: '/tasks',
      from: callbackQuery.from
    });
  } else if (data === 'prompt_add_task') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  } else if (data === 'create_task_from_forward') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const forwardedMessage = forwardedMessages[chatId];
      if (!forwardedMessage) {
        console.error(`üëâ ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chatId: ${chatId}`);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      const taskTitle = forwardedMessage.text || forwardedMessage.caption || '–ó–∞–¥–∞—á–∞ –∏–∑ Telegram';
      
      console.log(`üëâ DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏`);
      console.log(`üëâ DEBUG: –î–∞–Ω–Ω—ã–µ callbackQuery.from:`, JSON.stringify(callbackQuery.from));
      console.log(`üëâ DEBUG: –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`, taskTitle);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é getOrCreateUser
      const user = await getOrCreateUser({
        chat: { id: chatId },
        from: callbackQuery.from
      });
      
      console.log(`üëâ DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç getOrCreateUser:`, JSON.stringify(user));
      console.log(`üëâ DEBUG: user_id –∏–∑ getOrCreateUser: ${user.id}`);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const taskData = {
        user_id: user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        title: taskTitle.substring(0, 100), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        description: taskTitle.length > 100 ? taskTitle.substring(100) : '',
        due_date: new Date().toISOString().split('T')[0], // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –∫–∞–∫ —Å—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        priority: 'medium'
      };
      
      console.log(`üëâ DEBUG: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:`, JSON.stringify(taskData));
      console.log(`üëâ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} (ID: ${user.id})`);
      
      const response = await axios.post(`${apiUrl}/tasks`, taskData);
      
      console.log('üëâ DEBUG: –û—Ç–≤–µ—Ç API:', JSON.stringify(response.data));
      console.log(`üëâ DEBUG: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ${response.data.id}, user_id: ${response.data.user_id}`);
      
      if (response.data && response.data.id) {
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        delete forwardedMessages[chatId];
        
        bot.sendMessage(chatId, '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
              [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
            ]
          }
        });
      } else {
        console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API:', response.data);
        throw new Error('–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      console.error('–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:', error.response ? error.response.data : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ response');
      
      bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    }
  } else if (data === 'cancel_forward') {
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å
    delete forwardedMessages[chatId];
    bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  } else if (data.startsWith('complete_task_')) {
    const taskId = data.split('_')[2];
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
      await axios.put(`${apiUrl}/tasks/${taskId}`, {
        done: true
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º (—É–±–∏—Ä–∞–µ–º Markdown)
      bot.editMessageText(`‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n${callbackQuery.message.text.split('\n\n').slice(1).join('\n\n')}`, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: webAppUrl } }]
          ]
        }
      });
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
      bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
      bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'
      });
    }
  }
  
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
  bot.answerCallbackQuery(callbackQuery.id);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  if (isShuttingDown) {
    return;
  }
  
  console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error.message);
  
  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 409 Conflict (–∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling
  if (error.code === 409) {
    console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç API, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é polling...');
    bot.stopPolling()
      .then(() => {
        setTimeout(() => {
          if (!isShuttingDown) {
            bot.startPolling();
            console.log('Polling —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
          }
        }, 3000); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ polling:', err);
      });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.onText(/\/test/, (msg) => {
  const chatId = msg.chat.id;
  const telegramUserId = msg.from.id;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  userChatIds.set(telegramUserId, chatId);
  console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id: ${chatId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: ${telegramUserId}`);
  
  // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const now = new Date();
  const currentTime = now.toLocaleTimeString('ru-RU');
  const currentDate = now.toLocaleDateString('ru-RU');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  let message = `üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n`;
  message += `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}\n`;
  message += `–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${currentDate}\n\n`;
  message += `–í–∞—à Telegram ID: ${telegramUserId}\n`;
  message += `–í–∞—à chat_id: ${chatId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n`;
  message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChatIds.size}`;
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
function escapeMarkdown(text) {
  if (!text) return '';
  return text
    .replace(/\*/g, '\\*')
    .replace(/_/g, '\\_')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/~/g, '\\~')
    .replace(/`/g, '\\`')
    .replace(/>/g, '\\>')
    .replace(/#/g, '\\#')
    .replace(/\+/g, '\\+')
    .replace(/-/g, '\\-')
    .replace(/=/g, '\\=')
    .replace(/\|/g, '\\|')
    .replace(/\{/g, '\\{')
    .replace(/\}/g, '\\}')
    .replace(/\./g, '\\.')
    .replace(/\!/g, '\\!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkNotifications() {
  if (isShuttingDown) return;
  
  console.log("üëâ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
  console.log("üëâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", Array.from(userChatIds.entries()));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É –Ω–∞—Å –µ—Å—Ç—å chat_id
    for (const [userId, chatId] of userChatIds.entries()) {
      try {
        console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await axios.get(`${apiUrl}/tasks?user_id=${userId}`);
        const tasks = response.data;
        console.log(`üëâ –ü–æ–ª—É—á–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞—á–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const tasksWithNotifications = tasks.filter(task => 
          !task.done && task.due_date && task.due_time && task.notification
        );
        console.log(`üëâ –ó–∞–¥–∞—á–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, 
          tasksWithNotifications.map(t => ({
            id: t.id,
            title: t.title,
            due_date: t.due_date,
            due_time: t.due_time,
            notification: t.notification
          }))
        );
        
        // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        const now = new Date();
        const currentDate = now.toISOString().split('T')[0]; // YYYY-MM-DD
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();
        console.log(`üëâ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentDate} ${currentHour}:${currentMinute}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const task of tasks) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
          if (task.done) {
            continue;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
          if (!task.due_date || !task.due_time || !task.notification) {
            continue;
          }
          
          console.log(`üëâ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: "${task.title}" (${task.id}), —Å—Ä–æ–∫: ${task.due_date} ${task.due_time}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${task.notification}`);
          
          // –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
          const [taskHour, taskMinute] = task.due_time.split(':').map(Number);
          
          // –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          let notificationTime = new Date(`${task.due_date}T${task.due_time}`);
          console.log(`üëâ –ò—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏: ${notificationTime.toISOString()}`);
          
          switch (task.notification) {
            case '–ó–∞ 5 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 5);
              break;
            case '–ó–∞ 10 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 10);
              break;
            case '–ó–∞ 15 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 15);
              break;
            case '–ó–∞ 30 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 30);
              break;
            case '–ó–∞ 1 —á–∞—Å':
              notificationTime.setHours(notificationTime.getHours() - 1);
              break;
            case '–ó–∞ 2 —á–∞—Å–∞':
              notificationTime.setHours(notificationTime.getHours() - 2);
              break;
            case '–ó–∞ –¥–µ–Ω—å':
              notificationTime.setDate(notificationTime.getDate() - 1);
              break;
          }
          
          console.log(`üëâ –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationTime.toISOString()}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          // –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 2 –º–∏–Ω—É—Ç—ã (—Ç.–µ. –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬±2 –º–∏–Ω—É—Ç—ã –æ—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
          const notificationHour = notificationTime.getHours();
          const notificationMinute = notificationTime.getMinutes();
          const notificationDate = notificationTime.toISOString().split('T')[0];
          
          console.log(`üëâ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: –¢–µ–∫—É—â–µ–µ [${currentDate} ${currentHour}:${currentMinute}] vs –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${notificationDate} ${notificationHour}:${notificationMinute}]`);
          
          // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const currentTotalMinutes = currentHour * 60 + currentMinute;
          const notificationTotalMinutes = notificationHour * 60 + notificationMinute;
          const timeDifference = Math.abs(currentTotalMinutes - notificationTotalMinutes);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –±–ª–∏–∑–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 –º–∏–Ω—É—Ç)
          if (currentDate === notificationDate && timeDifference <= 2) {
            console.log(`üëâ ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}" (${task.id}). –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDifference} –º–∏–Ω.`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –∑–Ω–∞–µ–º –µ–≥–æ chat_id
            console.log(`üëâ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id: ${chatId}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
            let message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n`;
            message += `${task.title}\n`;
            
            if (task.description) {
              message += `${task.description}\n\n`;
            }
            
            message += `üìÖ –°—Ä–æ–∫: ${task.due_date}\n`;
            message += `‚è∞ –í—Ä–µ–º—è: ${task.due_time}\n`;
            
            bot.sendMessage(chatId, message, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', callback_data: `complete_task_${task.id}` }],
                  [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: `${webAppUrl}/edit-task/${task.id}` } }]
                ]
              }
            }).then(() => {
              console.log(`üëâ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            }).catch(err => {
              console.error(`üëâ ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}:`, err.message);
            });
          }
        }
      } catch (userError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, userError);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
    if (error.response) {
      console.error('‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  } finally {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, –µ—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
    if (!isShuttingDown) {
      console.log(`üëâ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥`);
      setTimeout(checkNotifications, 60000); // 1 –º–∏–Ω—É—Ç–∞
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
setTimeout(checkNotifications, 5000); // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞

bot.onText(/\/command/, (msg) => {
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
  bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
    { command: '/tasks', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á' },
    { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É' },
    { command: '/webapp', description: '–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
    { command: '/test', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
    { command: '/force_notification', description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –∑–∞–¥–∞—á–∏' }
  ]).then(() => {
    bot.sendMessage(msg.chat.id, '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
  }).catch((error) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: ' + error.message);
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /force_notification - –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.onText(/\/force_notification (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramUserId = msg.from.id;
  const taskId = match[1]; // ID –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /force_notification
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username || msg.from.first_name} (ID: ${telegramUserId}) –∑–∞–ø—Ä–æ—Å–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`);
  
  if (!taskId || isNaN(parseInt(taskId))) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏: /force_notification ID');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ API
    const response = await axios.get(`${apiUrl}/tasks/${taskId}`);
    const task = response.data;
    
    if (!task || !task.id) {
      bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (task.user_id !== telegramUserId) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUserId} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${task.user_id}`);
      bot.sendMessage(chatId, `‚ùå –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.`);
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
    let message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n`;
    message += `${task.title}\n`;
    
    if (task.description) {
      message += `${task.description}\n\n`;
    }
    
    if (task.due_date) {
      message += `üìÖ –°—Ä–æ–∫: ${task.due_date}\n`;
    }
    
    if (task.due_time) {
      message += `‚è∞ –í—Ä–µ–º—è: ${task.due_time}\n`;
    }
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', callback_data: `complete_task_${task.id}` }],
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: `${webAppUrl}/edit-task/${task.id}` } }]
        ]
      }
    });
    
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramUserId}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã force_notification –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/^\/force_notification$/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /force_notification ID');
});

console.log('–ë–æ—Ç TaskDrop –∑–∞–ø—É—â–µ–Ω!');