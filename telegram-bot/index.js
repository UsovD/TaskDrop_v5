const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

// –¢–æ–∫–µ–Ω API –¥–ª—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
// URL API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –æ –∑–∞–¥–∞—á–∞—Ö
const apiUrl = process.env.API_URL;
// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const webAppUrl = process.env.WEBAPP_URL;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –≤–µ–±—Ö—É–∫–∞–º–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
const bot = new TelegramBot(token, { 
  polling: true,
  filepath: false
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ TaskDrop. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
  
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
/webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*
  
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot.onText(/\/webapp/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TaskDrop:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å TaskDrop', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks - –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ API
bot.onText(/\/tasks/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
    bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...');
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
    const response = await axios.get(`${apiUrl}/tasks?user_id=1`);
    const tasks = response.data;
    
    if (tasks.length === 0) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
          ]
        }
      });
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    let message = '*–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n';
    
    tasks.filter(task => !task.done).forEach((task, index) => {
      const dueDate = task.due_date ? `üìÖ ${task.due_date}` : '';
      const dueTime = task.due_time ? `‚è∞ ${task.due_time}` : '';
      const notification = task.notification ? `üîî ${task.notification}` : '';
      
      message += `*${index + 1}.* ${task.title}\n`;
      
      if (task.description) {
        message += `   _${task.description}_\n`;
      }
      
      if (dueDate || dueTime || notification) {
        message += `   ${dueDate} ${dueTime} ${notification}\n`;
      }
      
      message += '\n';
    });
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: webAppUrl } }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.onText(/\/add (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const taskTitle = match[1]; // —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /add
  
  if (!taskTitle) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
    return;
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    const response = await axios.post(`${apiUrl}/tasks`, {
      title: taskTitle,
      user_id: 1,
      done: false
    });
    
    if (response.data && response.data.success) {
      bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ *"${taskTitle}"* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
          ]
        }
      });
    } else {
      throw new Error('–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/^\/add$/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.setMyCommands([
  { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: '/tasks', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á' },
  { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É' },
  { command: '/help', description: '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
  { command: '/webapp', description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TaskDrop' }
]);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  if (data === 'show_tasks') {
    // –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /tasks
    bot.emit('text', { 
      chat: { id: chatId },
      text: '/tasks',
      from: callbackQuery.from
    });
  } else if (data === 'prompt_add_task') {
    bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
  
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
  bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;
    
    bot.sendMessage(chatId, '–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error.message);
});

console.log('–ë–æ—Ç TaskDrop –∑–∞–ø—É—â–µ–Ω!'); 