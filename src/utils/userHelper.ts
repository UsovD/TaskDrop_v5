import { isTMA } from '@telegram-apps/sdk-react';

interface UserData {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
}

// –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è Telegram WebApp
declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        initDataUnsafe: {
          user?: {
            id: number;
            first_name: string;
            last_name?: string;
            username?: string;
            photo_url?: string;
          };
        };
        initData?: string;
      };
    };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
 */
export const getUserData = async (): Promise<UserData> => {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—ç—à–∞ –≤ URL (–¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞)
    const urlHash = window.location.hash;
    console.log('üîó URL hash:', urlHash);
    
    if (urlHash.includes('tgWebAppData')) {
      console.log('üîç –ù–∞–π–¥–µ–Ω tgWebAppData –≤ URL hash, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL hash
      const hashParams = new URLSearchParams(urlHash.substring(1));
      const tgWebAppData = hashParams.get('tgWebAppData');
      
      if (tgWebAppData) {
        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω tgWebAppData:', tgWebAppData);
        
        try {
          const dataParams = new URLSearchParams(tgWebAppData);
          const userJson = dataParams.get('user');
          
          if (userJson) {
            console.log('üîç –ù–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä user –≤ tgWebAppData:', userJson);
            const user = JSON.parse(userJson);
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL hash:', user);
            
            return {
              id: user.id,
              first_name: user.first_name,
              last_name: user.last_name,
              username: user.username,
              photo_url: user.photo_url
            };
          } else {
            console.log('‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ tgWebAppData');
          }
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ tgWebAppData –∏–∑ URL:', err);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
    console.log('üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –≤ —Å—Ä–µ–¥–µ Telegram...');
    const isTelegram = await isTMA('complete');
    console.log(`üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ isTMA: ${isTelegram}`);
    
    if (!isTelegram) {
      // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–Ω–µ Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
      console.log('‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π user_id');
      return getMockUserData();
    }
    
    // –í Telegram Web App –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ window.Telegram.WebApp
    const telegramWebApp = window.Telegram?.WebApp;
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞ WebApp:', !!telegramWebApp);
    
    if (telegramWebApp) {
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initDataUnsafe:', !!telegramWebApp.initDataUnsafe);
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData:', !!telegramWebApp.initData);
      
      if (telegramWebApp.initDataUnsafe && telegramWebApp.initDataUnsafe.user) {
        const user = telegramWebApp.initDataUnsafe.user;
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);
        console.log(`‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} ${user.last_name || ''}`);
        
        return {
          id: user.id,
          first_name: user.first_name,
          last_name: user.last_name,
          username: user.username,
          photo_url: user.photo_url
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData –∏ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
      if (telegramWebApp.initData) {
        console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ initData:', telegramWebApp.initData);
        try {
          const searchParams = new URLSearchParams(telegramWebApp.initData);
          const userParam = searchParams.get('user');
          
          if (userParam) {
            console.log('üîç –ù–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä user –≤ initData:', userParam);
            const user = JSON.parse(userParam);
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ initData: ${user.id}`);
            console.log(`‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} ${user.last_name || ''}`);
            
            return {
              id: user.id,
              first_name: user.first_name,
              last_name: user.last_name,
              username: user.username,
              photo_url: user.photo_url
            };
          }
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä user –∏–∑ initData');
          
          // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ initData:');
          for (const [key, value] of searchParams.entries()) {
            console.log(`   - ${key}: ${value}`);
          }
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ initData:', err);
        }
      }
    }
    
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π user_id');
    return getMockUserData();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return getMockUserData();
  }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const getMockUserData = (): UserData => {
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π ID, —á—Ç–æ–±—ã –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  const testUserId = 999999;
  console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π ID: ${testUserId}`);
  
  return {
    id: testUserId,
    first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    username: 'test_user',
    photo_url: undefined
  };
}; 