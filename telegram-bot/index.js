const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logsDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

const logFile = path.join(logsDir, `bot_${new Date().toISOString().replace(/:/g, '-')}.log`);
const logStream = fs.createWriteStream(logFile, { flags: 'a' });

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
const originalConsoleLog = console.log;
const originalConsoleError = console.error;

console.log = function() {
  const args = Array.from(arguments);
  const timestamp = new Date().toISOString();
  const message = `[${timestamp}] [INFO] ${args.join(' ')}`;
  
  originalConsoleLog.apply(console, [message]);
  logStream.write(message + '\n');
};

console.error = function() {
  const args = Array.from(arguments);
  const timestamp = new Date().toISOString();
  const message = `[${timestamp}] [ERROR] ${args.join(' ')}`;
  
  originalConsoleError.apply(console, [message]);
  logStream.write(message + '\n');
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const lockFile = path.join(__dirname, 'bot.lock');
try {
  // –ï—Å–ª–∏ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω
  if (fs.existsSync(lockFile)) {
    const pid = fs.readFileSync(lockFile, 'utf-8');
    console.error(`–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID ${pid}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.`);
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  fs.writeFileSync(lockFile, process.pid.toString());
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
}

// –¢–æ–∫–µ–Ω API –¥–ª—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
// URL API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –æ –∑–∞–¥–∞—á–∞—Ö
const apiUrl = process.env.API_URL;
// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const webAppUrl = process.env.WEBAPP_URL;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const bot = new TelegramBot(token, { 
  polling: true,
  filepath: false,
  webhookReply: false
});

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
let isShuttingDown = false;

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// –•—Ä–∞–Ω–∏–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const userChatIds = new Map();

// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
function gracefulShutdown() {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
  isShuttingDown = true;
  
  bot.stopPolling()
    .then(() => {
      console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
      try {
        if (fs.existsSync(lockFile)) {
          fs.unlinkSync(lockFile);
          console.log('–§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
      logStream.end('–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É\n', () => {
        process.exit(0);
      });
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
      try {
        if (fs.existsSync(lockFile)) {
          fs.unlinkSync(lockFile);
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', e);
      }
      
      logStream.end('–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π\n', () => {
        process.exit(1);
      });
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  const firstName = msg.from.first_name || '';
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —Ä–µ–∞–ª—å–Ω—ã–º ID
  userChatIds.set(userId, chatId);
  console.log(`üëâ –°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id ${chatId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId}`);
  
  // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è user_id=1 –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  userChatIds.set(1, chatId);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const authDate = Math.floor(Date.now() / 1000);
  const userDataParams = new URLSearchParams();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ WebApp
  const userData = {
    id: userId,
    first_name: firstName,
    last_name: lastName,
    username: username
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è initData
  userDataParams.append('user', JSON.stringify(userData));
  userDataParams.append('auth_date', authDate.toString());
  userDataParams.append('hash', 'dummy_hash_for_testing'); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–µ—à
  
  // –°–æ–∑–¥–∞–µ–º personalized URL –¥–ª—è web app
  const personalizedUrl = `${webAppUrl}#tgWebAppData=${encodeURIComponent(userDataParams.toString())}`;
  
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ TaskDrop. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
  
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
/webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name || '';
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const authDate = Math.floor(Date.now() / 1000);
  const userDataParams = new URLSearchParams();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ WebApp
  const userData = {
    id: userId,
    first_name: firstName,
    last_name: lastName,
    username: username
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è initData
  userDataParams.append('user', JSON.stringify(userData));
  userDataParams.append('auth_date', authDate.toString());
  userDataParams.append('hash', 'dummy_hash_for_testing'); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–µ—à
  
  // –°–æ–∑–¥–∞–µ–º personalized URL –¥–ª—è web app
  const personalizedUrl = `${webAppUrl}#tgWebAppData=${encodeURIComponent(userDataParams.toString())}`;
  
  bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
  
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot.onText(/\/webapp/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name || '';
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const authDate = Math.floor(Date.now() / 1000);
  const userDataParams = new URLSearchParams();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ WebApp
  const userData = {
    id: userId,
    first_name: firstName,
    last_name: lastName,
    username: username
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è initData
  userDataParams.append('user', JSON.stringify(userData));
  userDataParams.append('auth_date', authDate.toString());
  userDataParams.append('hash', 'dummy_hash_for_testing'); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–µ—à
  
  // –°–æ–∑–¥–∞–µ–º personalized URL –¥–ª—è web app
  const personalizedUrl = `${webAppUrl}#tgWebAppData=${encodeURIComponent(userDataParams.toString())}`;
  
  console.log(`–°–æ–∑–¥–∞–Ω URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${personalizedUrl}`);
  
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TaskDrop:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å TaskDrop', web_app: { url: personalizedUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks - –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ API
bot.onText(/\/tasks/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const firstName = msg.from.first_name || '';
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const authDate = Math.floor(Date.now() / 1000);
  const userDataParams = new URLSearchParams();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ WebApp
  const userData = {
    id: userId,
    first_name: firstName,
    last_name: lastName,
    username: username
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è initData
  userDataParams.append('user', JSON.stringify(userData));
  userDataParams.append('auth_date', authDate.toString());
  userDataParams.append('hash', 'dummy_hash_for_testing'); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–µ—à
  
  // –°–æ–∑–¥–∞–µ–º personalized URL –¥–ª—è web app
  const personalizedUrl = `${webAppUrl}#tgWebAppData=${encodeURIComponent(userDataParams.toString())}`;
  
  try {
    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
    bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...');
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await axios.get(`${apiUrl}/tasks?user_id=${userId}`);
    const tasks = response.data;
    
    if (tasks.length === 0) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
          ]
        }
      });
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    let message = '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n';
    
    tasks.filter(task => !task.done).forEach((task, index) => {
      const dueDate = task.due_date ? `üìÖ ${task.due_date}` : '';
      const dueTime = task.due_time ? `‚è∞ ${task.due_time}` : '';
      const notification = task.notification ? `üîî ${task.notification}` : '';
      
      message += `${index + 1}. ${task.title}\n`;
      
      if (task.description) {
        message += `   ${task.description}\n`;
      }
      
      if (dueDate || dueTime || notification) {
        message += `   ${dueDate} ${dueTime} ${notification}\n`;
      }
      
      message += '\n';
    });
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: personalizedUrl } }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.onText(/\/add (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const taskTitle = match[1]; // —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /add
  
  if (!taskTitle) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
    return;
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await axios.post(`${apiUrl}/tasks`, {
      title: taskTitle,
      user_id: userId,
      done: false
    });
    
    if (response.data && response.data.success) {
      bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "${taskTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
          ]
        }
      });
    } else {
      throw new Error('–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/^\/add$/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
      ]
    }
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.setMyCommands([
  { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: '/tasks', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á' },
  { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É' },
  { command: '/help', description: '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
  { command: '/webapp', description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TaskDrop' }
]);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
  if (msg.forward_from || msg.forward_from_chat) {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    const forwardFrom = msg.forward_from ? msg.forward_from.first_name : (msg.forward_from_chat ? msg.forward_from_chat.title : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫');
    
    bot.sendMessage(chatId, `–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç: ${forwardFrom}\n${msg.text || '–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç'}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'create_task_from_forward' }],
          [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_forward' }]
        ]
      }
    });
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (msg.text && !msg.text.startsWith('/')) {
    bot.sendMessage(chatId, '–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: personalizedUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const userId = callbackQuery.from.id;
  const firstName = callbackQuery.from.first_name || '';
  const lastName = callbackQuery.from.last_name || '';
  const username = callbackQuery.from.username || '';
  
  // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ URL
  const createPersonalizedUrl = () => {
    const authDate = Math.floor(Date.now() / 1000);
    const userDataParams = new URLSearchParams();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ WebApp
    const userData = {
      id: userId,
      first_name: firstName,
      last_name: lastName,
      username: username
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è initData
    userDataParams.append('user', JSON.stringify(userData));
    userDataParams.append('auth_date', authDate.toString());
    userDataParams.append('hash', 'dummy_hash_for_testing'); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–µ—à
    
    // –°–æ–∑–¥–∞–µ–º personalized URL –¥–ª—è web app
    return `${webAppUrl}#tgWebAppData=${encodeURIComponent(userDataParams.toString())}`;
  };
  
  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback –¥–µ–π—Å—Ç–≤–∏–π
    if (data === 'show_tasks') {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á...' });
        
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await axios.get(`${apiUrl}/tasks?user_id=${userId}`);
        const tasks = response.data;
        
        if (tasks.length === 0) {
          bot.editMessageText('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
                [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: createPersonalizedUrl() } }]
              ]
            }
          });
          return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        let message = '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n';
        
        tasks.filter(task => !task.done).forEach((task, index) => {
          const dueDate = task.due_date ? `üìÖ ${task.due_date}` : '';
          const dueTime = task.due_time ? `‚è∞ ${task.due_time}` : '';
          const notification = task.notification ? `üîî ${task.notification}` : '';
          
          message += `${index + 1}. ${task.title}\n`;
          
          if (task.description) {
            message += `   ${task.description}\n`;
          }
          
          if (dueDate || dueTime || notification) {
            message += `   ${dueDate} ${dueTime} ${notification}\n`;
          }
          
          message += '\n';
        });
        
        bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'prompt_add_task' }],
              [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: createPersonalizedUrl() } }]
            ]
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
        bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: createPersonalizedUrl() } }]
            ]
          }
        });
      }
    } else if (data === 'prompt_add_task') {
      bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: createPersonalizedUrl() } }]
          ]
        }
      });
    } else if (data === 'create_task_from_forward') {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText = callbackQuery.message.text;
      console.log('–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å "–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç:"
      const textParts = messageText.split('\n');
      const firstLine = textParts.length > 1 ? textParts[1] : messageText;
      const remainingText = textParts.slice(2).join('\n');
      
      console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:', firstLine);
      console.log('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', remainingText);
      
      try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
        const taskData = {
          title: firstLine.length > 50 ? firstLine.substring(0, 47) + '...' : firstLine,
          description: remainingText,
          user_id: userId,
          done: false
        };
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API:', JSON.stringify(taskData));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        const response = await axios.post(`${apiUrl}/tasks`, taskData);
        
        console.log('–û—Ç–≤–µ—Ç API:', JSON.stringify(response.data));
        
        if (response.data && response.data.id) {
          bot.sendMessage(chatId, '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
                [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: createPersonalizedUrl() } }]
              ]
            }
          });
        } else {
          console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API:', response.data);
          throw new Error('–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        console.error('–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:', error.response ? error.response.data : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ response');
        
        bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      }
    } else if (data === 'cancel_forward') {
      bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    } else if (data.startsWith('complete_task_')) {
      const taskId = data.split('_')[2];
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        await axios.put(`${apiUrl}/tasks/${taskId}`, {
          done: true
        });
        
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!' });
        bot.sendMessage(chatId, '‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
              [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: createPersonalizedUrl() } }]
            ]
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏' });
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data
      bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
    bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  if (isShuttingDown) {
    return;
  }
  
  console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error.message);
  
  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 409 Conflict (–∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling
  if (error.code === 409) {
    console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç API, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é polling...');
    bot.stopPolling()
      .then(() => {
        setTimeout(() => {
          if (!isShuttingDown) {
            bot.startPolling();
            console.log('Polling —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
          }
        }, 3000); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ polling:', err);
      });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.onText(/\/test/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  userChatIds.set(userId, chatId);
  console.log(`üëâ –°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id ${chatId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId}`);
  
  // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è user_id=1 –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  userChatIds.set(1, chatId);
  
  // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const now = new Date();
  const currentTime = now.toLocaleTimeString('ru-RU');
  const currentDate = now.toLocaleDateString('ru-RU');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–¥–∞–ª–∏–º Markdown –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
  let message = `üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n`;
  message += `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}\n`;
  message += `–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${currentDate}\n\n`;
  message += `–í–∞—à Telegram ID: ${userId}\n`;
  message += `–í–∞—à chat_id: ${chatId}\n`;
  message += `–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${Array.from(userChatIds.entries()).map(entry => `ID ${entry[0]} -> chat ${entry[1]}`).join(', ')}\n\n`;
  message += `‚ö†Ô∏è –î–ª—è –∑–∞–¥–∞—á —Å user_id = ${userId} –∏ user_id = 1 –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`;
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
function escapeMarkdown(text) {
  if (!text) return '';
  return text
    .replace(/\*/g, '\\*')
    .replace(/_/g, '\\_')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/~/g, '\\~')
    .replace(/`/g, '\\`')
    .replace(/>/g, '\\>')
    .replace(/#/g, '\\#')
    .replace(/\+/g, '\\+')
    .replace(/-/g, '\\-')
    .replace(/=/g, '\\=')
    .replace(/\|/g, '\\|')
    .replace(/\{/g, '\\{')
    .replace(/\}/g, '\\}')
    .replace(/\./g, '\\.')
    .replace(/\!/g, '\\!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkNotifications() {
  if (isShuttingDown) return;
  
  console.log("üëâ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
  console.log("üëâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", Array.from(userChatIds.entries()));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [userId, chatId] of userChatIds.entries()) {
      try {
        console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (chat_id: ${chatId})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await axios.get(`${apiUrl}/tasks?user_id=${userId}`);
        const tasks = response.data;
        console.log(`üëâ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${tasks.length}`);
        
        // –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞—á–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const tasksWithNotifications = tasks.filter(task => 
          !task.done && task.due_date && task.due_time && task.notification
        );
        
        if (tasksWithNotifications.length > 0) {
          console.log(`üëâ –ó–∞–¥–∞—á–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, 
            tasksWithNotifications.map(t => ({
              id: t.id,
              title: t.title,
              due_date: t.due_date,
              due_time: t.due_time,
              notification: t.notification
            }))
          );
        } else {
          console.log(`üëâ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç –∑–∞–¥–∞—á —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏`);
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–¥–∞—á —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        }
        
        // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        const now = new Date();
        const currentDate = now.toISOString().split('T')[0]; // YYYY-MM-DD
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();
        console.log(`üëâ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentDate} ${currentHour}:${currentMinute}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const task of tasksWithNotifications) {
          console.log(`üëâ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: "${task.title}" (${task.id}), —Å—Ä–æ–∫: ${task.due_date} ${task.due_time}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${task.notification}`);
          
          // –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          let notificationTime = new Date(`${task.due_date}T${task.due_time}`);
          console.log(`üëâ –ò—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏: ${notificationTime.toISOString()}`);
          
          switch (task.notification) {
            case '–ó–∞ 5 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 5);
              break;
            case '–ó–∞ 10 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 10);
              break;
            case '–ó–∞ 15 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 15);
              break;
            case '–ó–∞ 30 –º–∏–Ω—É—Ç':
              notificationTime.setMinutes(notificationTime.getMinutes() - 30);
              break;
            case '–ó–∞ 1 —á–∞—Å':
              notificationTime.setHours(notificationTime.getHours() - 1);
              break;
            case '–ó–∞ 2 —á–∞—Å–∞':
              notificationTime.setHours(notificationTime.getHours() - 2);
              break;
            case '–ó–∞ –¥–µ–Ω—å':
              notificationTime.setDate(notificationTime.getDate() - 1);
              break;
          }
          
          console.log(`üëâ –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationTime.toISOString()}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          // –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 2 –º–∏–Ω—É—Ç—ã (—Ç.–µ. –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬±2 –º–∏–Ω—É—Ç—ã –æ—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
          const notificationHour = notificationTime.getHours();
          const notificationMinute = notificationTime.getMinutes();
          const notificationDate = notificationTime.toISOString().split('T')[0];
          
          console.log(`üëâ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: –¢–µ–∫—É—â–µ–µ [${currentDate} ${currentHour}:${currentMinute}] vs –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${notificationDate} ${notificationHour}:${notificationMinute}]`);
          
          // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const currentTotalMinutes = currentHour * 60 + currentMinute;
          const notificationTotalMinutes = notificationHour * 60 + notificationMinute;
          const timeDifference = Math.abs(currentTotalMinutes - notificationTotalMinutes);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –±–ª–∏–∑–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 –º–∏–Ω—É—Ç)
          if (currentDate === notificationDate && timeDifference <= 2) {
            console.log(`üëâ ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}" (${task.id}). –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDifference} –º–∏–Ω.`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            console.log(`üëâ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId} (chat_id: ${chatId})`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
            let message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n`;
            message += `${task.title}\n`;
            
            if (task.description) {
              message += `${task.description}\n\n`;
            }
            
            message += `üìÖ –°—Ä–æ–∫: ${task.due_date}\n`;
            message += `‚è∞ –í—Ä–µ–º—è: ${task.due_time}\n`;
            
            bot.sendMessage(chatId, message, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', callback_data: `complete_task_${task.id}` }],
                  [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: `${webAppUrl}/edit-task/${task.id}` } }]
                ]
              }
            }).then(() => {
              console.log(`üëâ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            }).catch(err => {
              console.error(`üëâ ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}:`, err.message);
            });
          } else {
            console.log(`üëâ ‚ùå –í—Ä–µ–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º`);
          }
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
    if (error.response) {
      console.error('‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  } finally {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, –µ—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
    if (!isShuttingDown) {
      console.log(`üëâ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥`);
      setTimeout(checkNotifications, 60000); // 1 –º–∏–Ω—É—Ç–∞
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
setTimeout(checkNotifications, 5000); // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞

bot.onText(/\/command/, (msg) => {
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
  bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
    { command: '/tasks', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á' },
    { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É' },
    { command: '/webapp', description: '–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
    { command: '/test', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
    { command: '/force_notification', description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –∑–∞–¥–∞—á–∏' },
    { command: '/notify', description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏' }
  ]).then(() => {
    bot.sendMessage(msg.chat.id, '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
  }).catch((error) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: ' + error.message);
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /force_notification - –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.onText(/\/force_notification (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const taskId = match[1]; // ID –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /force_notification
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username || msg.from.first_name} (ID: ${msg.from.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`);
  console.log(`Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatId}`);
  
  if (!taskId || isNaN(parseInt(taskId))) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏: /force_notification ID');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ API
    const response = await axios.get(`${apiUrl}/tasks/${taskId}`);
    const task = response.data;
    
    if (!task || !task.id) {
      bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
    let message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n`;
    message += `${task.title}\n`;
    
    if (task.description) {
      message += `${task.description}\n\n`;
    }
    
    if (task.due_date) {
      message += `üìÖ –°—Ä–æ–∫: ${task.due_date}\n`;
    }
    
    if (task.due_time) {
      message += `‚è∞ –í—Ä–µ–º—è: ${task.due_time}\n`;
    }
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', callback_data: `complete_task_${task.id}` }],
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: `${webAppUrl}/edit-task/${task.id}` } }]
        ]
      }
    });
    
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã force_notification –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/^\/force_notification$/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /force_notification ID');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notify - –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏
bot.onText(/\/notify (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const taskId = match[1]; // ID –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
  
  if (!taskId || isNaN(parseInt(taskId))) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏: /notify ID');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ API
    const response = await axios.get(`${apiUrl}/tasks/${taskId}`);
    const task = response.data;
    
    if (!task || !task.id) {
      bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      return;
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}":`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ó–∞ 5 –º–∏–Ω—É—Ç', callback_data: `notify_${taskId}_5min` },
            { text: '–ó–∞ 10 –º–∏–Ω—É—Ç', callback_data: `notify_${taskId}_10min` }
          ],
          [
            { text: '–ó–∞ 15 –º–∏–Ω—É—Ç', callback_data: `notify_${taskId}_15min` },
            { text: '–ó–∞ 30 –º–∏–Ω—É—Ç', callback_data: `notify_${taskId}_30min` }
          ],
          [
            { text: '–ó–∞ 1 —á–∞—Å', callback_data: `notify_${taskId}_1hour` },
            { text: '–ó–∞ 2 —á–∞—Å–∞', callback_data: `notify_${taskId}_2hours` }
          ],
          [
            { text: '–ó–∞ –¥–µ–Ω—å', callback_data: `notify_${taskId}_1day` }
          ]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

console.log('–ë–æ—Ç TaskDrop –∑–∞–ø—É—â–µ–Ω!'); 